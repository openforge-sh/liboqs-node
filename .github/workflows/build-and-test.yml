name: Build, Test, and Deploy

on:
  push:
    branches:
      - main
    tags:
      - 'v*'
  pull_request:
    branches:
      - main

jobs:
  build-and-test:
    runs-on: [self-hosted, wasm]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get version
        id: version
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Package version: $VERSION"

      - name: Get LibOQS commit hash
        id: liboqs-hash
        run: |
          LIBOQS_REPO="https://github.com/open-quantum-safe/liboqs.git"
          LIBOQS_BRANCH="main"
          LIBOQS_HASH=$(git ls-remote $LIBOQS_REPO refs/heads/$LIBOQS_BRANCH | cut -f1)
          echo "hash=$LIBOQS_HASH" >> $GITHUB_OUTPUT
          echo "LibOQS commit: $LIBOQS_HASH"

      - name: Compute build hash
        id: build-hash
        run: |
          # Combine LibOQS hash + algorithms.json + build.sh into a single hash
          BUILD_HASH=$(echo "${{ steps.liboqs-hash.outputs.hash }}-${{ hashFiles('algorithms.json', 'build.sh') }}" | sha256sum | cut -d' ' -f1)
          echo "hash=$BUILD_HASH" >> $GITHUB_OUTPUT
          echo "Build hash: $BUILD_HASH"

      - name: Restore build hash cache
        id: hash-cache
        uses: actions/cache/restore@v4
        with:
          path: .build-hash
          key: build-hash-${{ steps.build-hash.outputs.hash }}

      - name: Check if rebuild needed
        id: rebuild-check
        run: |
          if [ "${{ steps.hash-cache.outputs.cache-hit }}" = "true" ]; then
            echo "needed=false" >> $GITHUB_OUTPUT
            echo "✓ Build hash matches cache, no rebuild needed"
          else
            echo "needed=true" >> $GITHUB_OUTPUT
            echo "⚠ Build hash changed, rebuild required"
          fi

      - name: Install dependencies
        run: bun install

      - name: Build WASM modules
        if: steps.rebuild-check.outputs.needed == 'true'
        run: bun run build
        env:
          PARALLEL_JOBS: 8

      - name: Save build hash to cache
        if: steps.rebuild-check.outputs.needed == 'true'
        run: |
          echo "${{ steps.build-hash.outputs.hash }}" > .build-hash

      - name: Save build hash cache
        if: steps.rebuild-check.outputs.needed == 'true'
        uses: actions/cache/save@v4
        with:
          path: .build-hash
          key: build-hash-${{ steps.build-hash.outputs.hash }}

      - name: Verify WASM modules completeness
        run: |
          set -euo pipefail

          # Count expected algorithms
          ALGO_COUNT=$(jq '[.kem, .sig] | map(to_entries[].value) | map(to_entries[].value.slug) | length' algorithms.json)

          # Count actual files
          node_count=$(find dist/ -name "*.min.js" -type f | wc -l)
          deno_count=$(find dist/ -name "*.deno.js" -type f | wc -l)

          echo "Expected: $ALGO_COUNT modules per runtime"
          echo "Node.js modules: $node_count"
          echo "Deno modules: $deno_count"

          if [ "$node_count" -ne "$ALGO_COUNT" ]; then
            echo "::error::Node.js module count mismatch. Expected $ALGO_COUNT, got $node_count"
            exit 1
          fi

          if [ "$deno_count" -ne "$ALGO_COUNT" ]; then
            echo "::error::Deno module count mismatch. Expected $ALGO_COUNT, got $deno_count"
            exit 1
          fi

          echo "✅ All $ALGO_COUNT Node.js and Deno modules verified"

      - name: Run tests
        run: bun run test

      - name: Run Deno tests
        run: deno test --allow-read --allow-write --allow-run --allow-env --no-check tests/deno/

      - name: Generate documentation
        run: bun run docs

      - name: Upload WASM modules to CDN
        if: github.event_name == 'push' && github.ref == 'refs/heads/main' && steps.rebuild-check.outputs.needed == 'true'
        run: |
          VERSION="${{ steps.version.outputs.version }}"

          for file in dist/*; do
            filename=$(basename "$file")

            curl -X POST \
              -H "X-API-Key: ${{ secrets.CDN_API_KEY }}" \
              -F "file=@$file" \
              "https://cdn.openforge.sh/$VERSION/$filename"
          done

      - name: Upload documentation artifacts
        uses: actions/upload-artifact@v4
        with:
          name: docs
          path: docs/
          retention-days: 7

  publish-npm:
    needs: build-and-test
    runs-on: [self-hosted, wasm]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v'))

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Check if version already published
        id: check
        run: |
          PACKAGE_VERSION=$(node -p "require('./package.json').version")
          if npm view @openforge-sh/liboqs@$PACKAGE_VERSION version &>/dev/null; then
            echo "Version $PACKAGE_VERSION already published to npm"
            echo "skip=true" >> $GITHUB_OUTPUT
          else
            echo "Version $PACKAGE_VERSION not yet published"
            echo "skip=false" >> $GITHUB_OUTPUT
          fi

      - name: Configure npm authentication
        if: steps.check.outputs.skip == 'false'
        run: |
          echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_API_KEY }}" >> ~/.npmrc

      - name: Publish to npm
        if: steps.check.outputs.skip == 'false'
        run: npm publish --access public

  publish-jsr:
    needs: build-and-test
    runs-on: [self-hosted, wasm]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v'))

    permissions:
      contents: read
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Publish to JSR
        run: npx jsr publish

  deploy-docs:
    needs: build-and-test
    runs-on: [self-hosted, wasm]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: docs
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Download documentation artifacts
        uses: actions/download-artifact@v4
        with:
          name: docs
          path: docs-temp/

      - name: Prepare docs branch
        run: |
          # Remove everything except .git
          find . -mindepth 1 -maxdepth 1 ! -name '.git' ! -name 'docs-temp' -exec rm -rf {} +

          # Move docs to root
          mv docs-temp docs

      - name: Commit and push documentation
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add -A

          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "Update documentation from ${{ github.sha }}"
            git push origin docs
          fi
